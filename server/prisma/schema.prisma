// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://myuser:mypassword@150.136.247.187:5432/mydatabase"
}

model User {
  id                Int                   @id @default(autoincrement())
  display_name      String
  username          String                @unique
  authenticationkey String
  publicKey         String
  enc_privatekey    String
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  createdMessages   Message[]             @relation("sentMessages")
  conversations     ConversationUser[]
  refresh_token     String                @default("")
  profile_picture   String                @default("")
  sentRequests      ConversationRequest[] @relation("sentRequests")
  receivedRequests  ConversationRequest[] @relation("receivedRequests")
}

model Message {
  id             Int           @id @default(autoincrement())
  message        String
  author         User          @relation("sentMessages", fields: [authorId], references: [id])
  authorId       Int
  created_at     DateTime      @default(now())
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int?
  isEdited       Boolean       @default(false)
}

model Conversation {
  id              Int                @id @default(autoincrement())
  title           String?
  messages        Message[]
  created_at      DateTime           @default(now())
  dateLastMessage DateTime?
  participants    ConversationUser[]
}

model ConversationUser {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  isRead         Boolean      @default(true)
}

model ConversationRequest {
  id          Int           @id @default(autoincrement())
  sender      User          @relation("sentRequests", fields: [senderId], references: [id])
  senderId    Int
  recipient   User          @relation("receivedRequests", fields: [recipientId], references: [id])
  recipientId Int
  status      RequestStatus
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DENIED
}
